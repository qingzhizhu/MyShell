#!/bin/bash
#echo "*** Template Shell Script ***"
#echo "Desc : git hook 服务端写权限提交检查"
#echo "我们假设gitlab上已Push上的全是有权限的用户推上去的"
#echo "基于gitlab实现，根据提交的用户名，从gitlab上找到用户组权限。"
#echo "在gitlab上添加子分组，和权限设置，可视化操作"
#echo "Author : gengkun123@gmail.com"
#echo "*** Run time: $(date) @ $(hostname)"

#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#echo "DIR=$DIR"

#env

GL_HOST="localhost"
#GL_HOST="http://10.1.3.38"
#echo "host=$GL_HOST"

#对应项目的子组id
#TODO:通过项目名称，找到所属子组的ids
#$GL_HOST/api/v4/groups


#gengkun/test 43组 44和45是43的子组
#GROUP_ARR=(43 44 45)

#Demo 51组 52master子组 53dev子组 54art子组
#GROUP_ARR=(52 53 54)

#cod: master front server plan art
GROUP_ARR=(48 46 47 49 50)

author_name=$GL_USERNAME



function get_json_value()
{
  local json=$1
  local key=$2
  if [[ -z "$3" ]]; then
    local num=1
  else
    local num=$3
  fi
  local value=$(echo "$json" | awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$key'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p)
  echo $value
}



#echo "----------"

function process_revision ()
{
  #echo "-----process_revision---statr----"
  json_key="id"
  author_id=`get_json_value $(curl -s $GL_HOST/api/v4/users?username=$author_name) $json_key`

  if [[ $author_id == "" ]]; then
    echo "非法用户name=$author_name;id=$author_id"
    exit 1
  fi
  echo "当前提交用户:$author_name,用户id=$author_id"

  author_group_id=-1


  for i in ${GROUP_ARR[@]}; do
    group_id=$i
    ##echo "group_id=$group_id"
    str=$(curl -s --header "PRIVATE-TOKEN: hkFAgEky2MCbGFqMPzGG" $GL_HOST/api/v4/groups/$group_id/members/$author_id)    
    ##echo "str=$str"
    tmp_author_id=-1
    if [[ $str =~ $json_key ]]; then
      tmp_author_id=`get_json_value $str $json_key`
    fi

    #echo "tmp_author_id=$tmp_author_id"
    if [[ $tmp_author_id != $author_id ]]; then
      #echo "非组中用户 $tmp_author_id"
      continue
    fi
    author_group_id=$group_id

    #echo "group_id=$group_id"
    
    str=$(curl -s --header "PRIVATE-TOKEN: hkFAgEky2MCbGFqMPzGG" $GL_HOST/api/v4/groups/$group_id/variables)
    #echo "组可写目录:str=$str"
    str="\'$str\'" #转义一下 去空格
    str=`echo $str | sed s/[[:space:]]//g`     
    json_key="value"
    #echo "get_json_value $str $json_key"
    USER_PATH=`get_json_value $str $json_key`
    echo "可写路径=$USER_PATH"
    if [[ $USER_PATH == "" ]]; then
      echo -e "用户$author_name,用户id:$author_id,所属组:$author_group_id,\n没有设置可写路径！请联系管理员！"
      exit 1
    fi
    ##echo "组可写目录:USER_PATH=$USER_PATH"

    if [[ $USER_PATH == "." || $USER_PATH == "/" ]]; then
      echo "you are master！can push"
      exit 0
      #test
      #exit 1
    fi

    #TODO:多用户组判断？
    # if [[ $author_group_id != -1 ]]; then
    #   break
    # fi
    break
  done

  if [[ $author_group_id == -1 ]]; then
    echo "当前提交用户:$author_name, 你不在任何写权限组，请联系管理员"
    exit 1
  fi

  #echo "----------process_revision commit list "
  revisions=$(git rev-list $old_revision..$new_revision)
  #echo "revisions=$revisions@@"


  changePath=""

  for revision in ${revisions[@]}; do
    #echo "revision=$revision"

    # parent_num=$(git cat-file -p $revision | grep -c "parent")
    # echo "parent_num=$parent_num"

    # if [[ $parent_num == 2 ]]; then
    #   echo "Merge continue忽略"
    #   continue
    # elif [[ $parent_num == 0 ]]; then
    #   echo "new branch"
    #   continue
    # elif [[ $parent_num != 1 ]]; then
    #     echo "parent_num=$parent_num;what?? revision=$revision"
    # fi

    #是否已经提交过
    isCommited=$(git branch --contains $revision)
    echo "isCommited=$isCommited"
    if [[ $isCommited != "" ]]; then
      #echo "此交记录提交过"
      continue
    fi

    #TODO:判断cherry-pick author  committer 不相等就是cherry-pick

    changePath=""

    #stat 会将比较深的路径变成.../dir/dir1/dir2/a.txt 用name-only 是全路径,而且也没用|+-等符号, 去掉文件名中的空格
    change=$( git show $revision --name-only | sed '1,/^$/d' | sed '1,/^$/d' | sed 's/ //g')
    ##echo -e "change=$change\n===="

    #一次提交记录检查------
    for i in $change; do
        #判断是否有 /
      if [[ $i =~ "/" ]]; then
        #echo "普通提交,包含斜杠:$i"
        #changePath=("${changePath[@]}" "${i%/*}")
        tempPath="${i%/*} "
        if [[ $changePath =~ $tempPath ]]; then
          #echo "changePath包含tempPath;@$changePath;$tempPath@"
          continue
        fi
        changePath="$changePath$tempPath"
        #echo "@@$changePath"

      #是否是个根目录下的文件, TODO 看需求是否禁用不包含.的跟目录文件
      #else
      elif [[ $i =~ "." ]]; then
        #不检查根目录的.gitignore
        if [[ $i =~ ".gitignore" ]]; then
          continue
        fi
        echo -e "Error: $author_name没权限在!根!目录下提交文件权限\n$i!!"
        exit 1

      else
        echo "其他字符：$i"
        :
      fi
    done
    #一次提交记录检查完毕------

    if [[ $changePath == "" ]]; then
      continue
    fi

    #============changepath enable ===========

    #change=$changePath

    #文件检测是否在允许的路径中

    for i in $changePath; do
      file=$i
      #echo "fiel=$file"
      isEnable=1
      msg=""
      filepath=$i
      OLDIFS=$IFS
      IFS=";"
      for path in $USER_PATH; do
        #只要在其中一个就行
        if [[ $filepath =~ $path  ]]; then
          #echo "$path is in $filepath"
          isEnable=1
          msg=""
          break
        else
          #msg="$msg\n$file not in $path"
          if [[ $msg == "" ]]; then
            msg="$msg\n$change !!"
          fi
          
          isEnable=0
        fi
      done
      IFS=$OLDIFS

      if [[ $isEnable == 0 ]]; then
        #echo -e "Error!!! don't commit!!! \nYou can Access dir are : ${USER_PATH} $msg"
        echo "--------------------------------------"
        echo -e "Error!! 提交用户$author_name可写的目录是:$USER_PATH \n以下文件不可提交: $msg"
        echo "--------------------------------------"
        exit 1
      fi

    done

  done

  #echo "----------process_revision end"

}

if [[ $author_name == "" ]]; then
  author_name="gengkun"
  echo "测试人员用户提交"
  process_revision
fi


while read old_revision new_revision refname ; do
  if [[ $old_revision == "0000000000000000000000000000000000000000" ]]; then
    echo "new branch!"
    exit 0
  fi
  #echo "old_revision=$old_revision"
  #echo "new_revision=$new_revision"
  process_revision
done


#echo "-----------"


##echo "You can push!"

exit 0
