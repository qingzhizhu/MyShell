#!/bin/bash
#echo "*** Template Shell Script ***"
#echo "Desc : git hook 客户端提交检查"
#echo "Author : gengkun123@gmail.com"
#echo "*** Run time: $(date) @ $(hostname)"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#echo "DIR=$DIR"
#echo "当前提交用户:$GIT_AUTHOR_NAME"


#echo "DIR=$DIR"
#exit 0


#用户名后缀_art表示都是美术组，_plan 策划组, _front 前端程序组， _server 后端程序组
USER_NUM=-1

#master
let USER_NUM=$USER_NUM+1
USER_ARR=("masterAA" "gengkun" "李思亮" "耿坤")
USER_ARR_PATH=(".")
DIC_USER=([$USER_NUM]=${USER_ARR[*]})
DIC_PATH=([$USER_NUM]=${USER_ARR_PATH[*]})

#前端开发
let USER_NUM=$USER_NUM+1
USER_ARR=("front")
USER_ARR_PATH=("a" "art" "BattleServer" "Gds" "Hypersync" "Proto" "Tools" "Client/Unity/Assets/CustomAssets")
DIC_USER+=([$USER_NUM]=${USER_ARR[*]})
DIC_PATH+=([$USER_NUM]=${USER_ARR_PATH[*]})



# for key in $(echo ${!DIC_USER[*]})
# do
#     echo $key":"${DIC_USER[key]}
# done

# for key in $(echo ${!DIC_PATH[*]})
# do
#     echo $key":"${DIC_PATH[key]}
# done

#后端开发
let USER_NUM=$USER_NUM+1
USER_ARR=("server")
USER_ARR_PATH=("Server" "Proto" "Gds")
DIC_USER+=([$USER_NUM]=${USER_ARR[*]})
DIC_PATH+=([$USER_NUM]=${USER_ARR_PATH[*]})

#美术组
let USER_NUM=$USER_NUM+1
USER_ARR=("art")
USER_ARR_PATH=("Client/Unity/Assets/CustomAssets/Arts")
DIC_USER+=([$USER_NUM]=${USER_ARR[*]})
DIC_PATH+=([$USER_NUM]=${USER_ARR_PATH[*]})

#策划组
let USER_NUM=$USER_NUM+1
USER_ARR=("plan")
USER_ARR_PATH=("Gds")
DIC_USER+=([$USER_NUM]=${USER_ARR[*]})
DIC_PATH+=([$USER_NUM]=${USER_ARR_PATH[*]})


#echo "----------"

process_revision ()
{
  #echo "----------process_revision start"
  revisions=$(git rev-list $old_revision..$new_revision)
  #echo "revisions=$revisions@@"
  

  changePath=""
  author=""
  for revision in ${revisions[@]}; do
    #echo "revision=$revision"
    message=$(git cat-file commit $revision | sed '1,/^$/d')
    #echo "message=$message"
    if [[ $message =~ "Merge" ]]; then
      #echo "这是一个merge提交，不检查，下一条"
      continue
    elif [[ $message =~ "Conflicts" ]]; then
      echo "这是一个冲突提交，不检查，下一条"
    fi



    changePath=""
    author=$(git show $revision --pretty=format:'%an' | sed q)
    echo "记录作者：$author"
    change=$( git show $revision --stat | sed '1,/^$/d' | sed '1,/^$/d; $d' )
    echo -e "change=$change\n===="

    #一次提交记录检查------
    for i in $change; do
      #判断是否有... 冲突
      if [[ $i =~ "..." ]]; then
        isGuest=0
        echo "冲突提交，包含...不用检查此提交记录:$i"
        changePath=""
        break
      
      #判断是否重命名操作{ }
      elif [[ $i =~ "{" || $i =~ "}" ]]; then
        isGuest=0
        echo "重命名提交，包含大括号，不用检查此提交记录:$i"
        changePath=""
        break
      
      
      #判断是否有 / 
      elif [[ $i =~ "/" ]]; then
        #echo "普通提交,包含斜杠:$i"
        #changePath=("${changePath[@]}" "${i%/*}")
        tempPath="${i%/*} "
        if [[ $changePath =~ $tempPath ]]; then
          echo "changePath包含tempPath;@$changePath;$tempPath@"
          continue
        fi
        changePath="${changePath}$tempPath"
        echo "@@$changePath"
      #是否是个根目录下的文件

      else
        #echo "其他字符：$i"
        :
      fi
    done
    #一次提交记录检查完毕------

    #检查是否在用户的权限文件夹中
    if [[ $changePath == "" ]]; then
      continue
    fi


    
    
   
    #============changepath enable ===========
    TMP_GIT_AUTHOR=$author
    #后缀_art表示都是美术组，_plan 策划组, _front 前端程序组， _server 后端程序组
    
    tmpAuthor=${TMP_GIT_AUTHOR#*_}
    #echo "tmpAuthor=$tmpAuthor"
    if [[  $tmpAuthor == "art" ]]; then
      TMP_GIT_AUTHOR="art"
    elif [[  $tmpAuthor == "plan" ]]; then
      TMP_GIT_AUTHOR="plan"
    elif [[  $tmpAuthor == "front" ]]; then
      TMP_GIT_AUTHOR="front"
    elif [[ $tmpAuthor == "server" ]]; then
      TMP_GIT_AUTHOR="server"
    fi

    echo "最终用户:$TMP_GIT_AUTHOR"

    change=$changePath
    needCheck=0
    isGuest=1
    for key in $(echo ${!DIC_USER[*]})
    do
        echo "$key : ${DIC_USER[$key]}"
        arr=${DIC_USER[$key]}
        if echo "${arr[@]}" | grep -w "$TMP_GIT_AUTHOR" &>/dev/null; then
          isGuest=0
        
        userPath=${DIC_PATH[$key]}
        #echo "userPath=${userPath}"
        #echo -e "检查是否在用户的权限文件夹中:$changePath -> $userPath"
        if [[ "${userPath}" == "." || "${userPath}" == ".,"  || "$userPath[0]" == "." ]]; then
          #echo "you are master,这条记录ok，下一条"
          isGuest=0
          break
        fi
          

          #文件检测是否在允许的路径中
          needCheck=1
          for i in $change; do
            file=$i
            echo "fiel=$file"
            isEnable=1
            msg=""
            filepath=$i
            for path in $userPath; do
              #只要在其中一个就行
              if [[ $filepath =~ $path  ]]; then
                echo "$path is in $filepath"
                isEnable=1
                msg=""
                break
              else
                msg="$msg\n$file not in $path"
                isEnable=0
              fi
            done

            if [[ $isEnable == 0 ]]; then
              echo -e "Error!!! don't commit!!! \nYou can Access dir are : ${userPath} $msg"
              exit 1
            fi
            


          done

          
          break;
        else
          :


        fi
            
    done



  done

  #echo "----------process_revision end"

}

isGuest=1
while read old_revision new_revision refname ; do
  if [[ $old_revision == "0000000000000000000000000000000000000000" ]]; then
    isGuest=0
    echo "new branch!"
    exit 0
  fi
  #echo "old_revision=$old_revision"
  #echo "new_revision=$new_revision"
  process_revision
done


#echo "-----------"

if [[ $isGuest == 1 ]]; then
  echo "当前提交用户:$TMP_GIT_AUTHOR"
  echo "Error: you don't have any Access！"
  exit 1
  #默认可访问
  #exit 0
fi

echo "You can push!"

#exit 1
